/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CrumbsRewardManagerInterface extends utils.Interface {
  functions: {
    "addLike(uint256,uint256)": FunctionFragment;
    "addReview(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "userLikesGivenCount(uint256)": FunctionFragment;
    "userLikesReceivedCount(uint256)": FunctionFragment;
    "userReviewsCount(uint256)": FunctionFragment;
    "userTokensBalance(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLike"
      | "addReview"
      | "owner"
      | "tokenAddress"
      | "userLikesGivenCount"
      | "userLikesReceivedCount"
      | "userReviewsCount"
      | "userTokensBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLike",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addReview",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userLikesGivenCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userLikesReceivedCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReviewsCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokensBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addLike", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReview", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLikesGivenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLikesReceivedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReviewsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokensBalance",
    data: BytesLike
  ): Result;

  events: {
    "LikeAdded(uint256,uint256,uint256,uint256)": EventFragment;
    "ReviewAdded(uint256,uint256)": EventFragment;
    "UserBalanceChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LikeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserBalanceChanged"): EventFragment;
}

export interface LikeAddedEventObject {
  fromUserId: BigNumber;
  toUserId: BigNumber;
  fromUserLikesGiven: BigNumber;
  toUserLikesReceived: BigNumber;
}
export type LikeAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LikeAddedEventObject
>;

export type LikeAddedEventFilter = TypedEventFilter<LikeAddedEvent>;

export interface ReviewAddedEventObject {
  userId: BigNumber;
  count: BigNumber;
}
export type ReviewAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReviewAddedEventObject
>;

export type ReviewAddedEventFilter = TypedEventFilter<ReviewAddedEvent>;

export interface UserBalanceChangedEventObject {
  userId: BigNumber;
  newBalance: BigNumber;
}
export type UserBalanceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  UserBalanceChangedEventObject
>;

export type UserBalanceChangedEventFilter =
  TypedEventFilter<UserBalanceChangedEvent>;

export interface CrumbsRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrumbsRewardManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLike(
      fromUserId: PromiseOrValue<BigNumberish>,
      toUserId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addReview(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    userLikesGivenCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userLikesReceivedCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userReviewsCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTokensBalance(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addLike(
    fromUserId: PromiseOrValue<BigNumberish>,
    toUserId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addReview(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  userLikesGivenCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userLikesReceivedCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userReviewsCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTokensBalance(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addLike(
      fromUserId: PromiseOrValue<BigNumberish>,
      toUserId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addReview(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    userLikesGivenCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLikesReceivedCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReviewsCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokensBalance(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LikeAdded(uint256,uint256,uint256,uint256)"(
      fromUserId?: null,
      toUserId?: null,
      fromUserLikesGiven?: null,
      toUserLikesReceived?: null
    ): LikeAddedEventFilter;
    LikeAdded(
      fromUserId?: null,
      toUserId?: null,
      fromUserLikesGiven?: null,
      toUserLikesReceived?: null
    ): LikeAddedEventFilter;

    "ReviewAdded(uint256,uint256)"(
      userId?: null,
      count?: null
    ): ReviewAddedEventFilter;
    ReviewAdded(userId?: null, count?: null): ReviewAddedEventFilter;

    "UserBalanceChanged(uint256,uint256)"(
      userId?: null,
      newBalance?: null
    ): UserBalanceChangedEventFilter;
    UserBalanceChanged(
      userId?: null,
      newBalance?: null
    ): UserBalanceChangedEventFilter;
  };

  estimateGas: {
    addLike(
      fromUserId: PromiseOrValue<BigNumberish>,
      toUserId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addReview(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    userLikesGivenCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLikesReceivedCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReviewsCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokensBalance(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLike(
      fromUserId: PromiseOrValue<BigNumberish>,
      toUserId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addReview(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLikesGivenCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLikesReceivedCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReviewsCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokensBalance(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
